var locationFormat = function (dist) {
  if (dist >= 1000) {
    return (dist / 1000).toFixed(2) + 'km'
  } else {
    return Math.round(dist) + 'm'
  }
}
/**
 * @description 留言信息时间格式化
*/
var timeFormat = function (sendTime, mustIncludeTime) {
  if( !sendTime ) return ''

  var timestamp = getDate( sendTime.replace( getRegExp("-","g"), '/' ) ).getTime()
  // 当前时间
  var currentDate = getDate();
  // 目标判断时间
  var srcDate = getDate(parseInt(timestamp));

  var currentYear = currentDate.getFullYear();
  var currentMonth = (currentDate.getMonth() + 1);
  var currentDateD = currentDate.getDate();

  var srcYear = srcDate.getFullYear();
  var srcMonth = (srcDate.getMonth() + 1);
  var srcDateD = srcDate.getDate();

  var ret = "";

  // 要额外显示的时间分钟
  var timeExtraStr = (mustIncludeTime ? " " + _formatDate(srcDate, "HH:mm") : "");

  // 当年
  if (currentYear == srcYear) {
    var currentTimestamp = currentDate.getTime();
    var srcTimestamp = timestamp;
    // 相差时间（单位：毫秒）
    var deltaTime = (currentTimestamp - srcTimestamp);

    // 当天（月份和日期一致才是）
    if (currentMonth == srcMonth && currentDateD == srcDateD) {
      // 时间相差60秒以内
      if (deltaTime < 60 * 1000)
        ret = "刚刚";
      // 否则当天其它时间段的，直接显示“时:分”的形式
      else ret = _formatDate(srcDate, "HH:mm");
    }
    // 当年 && 当天之外的时间（即昨天及以前的时间）
    else {
      // 昨天（以“现在”的时候为基准-1天）
      var yesterdayDate = getDate();
      yesterdayDate.setDate(yesterdayDate.getDate() - 1);

      // 前天（以“现在”的时候为基准-2天）
      var beforeYesterdayDate = getDate();
      beforeYesterdayDate.setDate(beforeYesterdayDate.getDate() - 2);

      // 用目标日期的“月”和“天”跟上方计算出来的“昨天”进行比较，是最为准确的（如果用时间戳差值
      // 的形式，是不准确的，比如：现在时刻是2019年02月22日1:00、而srcDate是2019年02月21日23:00，
      // 这两者间只相差2小时，直接用“deltaTime/(3600 * 1000)” > 24小时来判断是否昨天，就完全是扯蛋的逻辑了）
      if (srcMonth == (yesterdayDate.getMonth() + 1) && srcDateD == yesterdayDate.getDate())
        ret = "昨天" + timeExtraStr;// -1d
      // “前天”判断逻辑同上
      else if (srcMonth == (beforeYesterdayDate.getMonth() + 1) && srcDateD == beforeYesterdayDate.getDate())
        ret = "前天" + timeExtraStr;// -2d
      else {
        // 跟当前时间相差的小时数
        var deltaHour = (deltaTime / (3600 * 1000));

        // 如果小于或等 7*24小时就显示星期几
        if (deltaHour <= 7 * 24) {
          var weekday = [];
          weekday[0] = "星期日";
          weekday[1] = "星期一";
          weekday[2] = "星期二";
          weekday[3] = "星期三";
          weekday[4] = "星期四";
          weekday[5] = "星期五";
          weekday[6] = "星期六";

          // 取出当前是星期几
          var weedayDesc = weekday[srcDate.getDay()];
          ret = weedayDesc + timeExtraStr;
        }
        // 否则直接显示完整日期时间
        else
          ret = _formatDate(srcDate, "yyyy/M/d") + timeExtraStr;
      }
    }
  }
  // 往年
  else {
    ret = _formatDate(srcDate, "yyyy/M/d") + timeExtraStr;
  }

  return ret;

  function _formatDate (date, fmt) {
    date = date ||"";
    date = getDate(date.toString().replace(getRegExp("-","g"),"/"));
    date = date === undefined ? getDate() : date;
    date =typeof date =="number" ? getDate(date) : date;
    fmt = fmt ||"yyyy-MM-dd HH:mm:ss";
    var obj = {
      y: date.getFullYear(),// 年份，注意必须用getFullYear
      M: date.getMonth() + 1,// 月份，注意是从0-11
      d: date.getDate(),// 日期
      q: Math.floor((date.getMonth() + 3) / 3),// 季度
      w: date.getDay(),// 星期，注意是0-6
      H: date.getHours(),// 24小时制
      h: date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,// 12小时制
      m: date.getMinutes(),// 分钟
      s: date.getSeconds(),// 秒
      S: date.getMilliseconds()// 毫秒
    };
    var week = ["天","一","二","三","四","五","六"];
    var objKeys = ['y',"M","d","q","w","H","h","m","s","S"];
    for (var i = 0; i < objKeys.length; i++) {
      var key = objKeys[i];
      fmt = fmt.replace(getRegExp(key +"+","g"),function(m) {
        var val = obj[key] +"";
        if (key =="w")return (m.length > 2 ?"星期" :"周") + week[val];
        var len = val.length;
        for (var j = 0; j < m.length - len; j++)
          val ="0" + val;
        return m.length == 1 ? val : val.substring(val.length - m.length);
      });
    }
    return fmt;
};
}

module.exports = {
  locationFormat: locationFormat,
  timeFormat: timeFormat
}